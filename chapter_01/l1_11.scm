(define (f n)
  (if (< n 3)
    n
    (+ (+ (f (- n 1)) (* 2 (f (- n 2)))) (* 3 (f (- n 3))))))

(display (f 1))
(display "\n")
(display (f 2))
(display "\n")
(display (f 3))
(display "\n")
(display (f 4))
(display "\n")
(display (f 5))
(display "\n")
(display (f 6))
(display "\n")

(define (f-iter a b c n)
  (cond ((= n 0) a)
        ((= n 1) b)
        ((= n 2) c)
        ((> n 2) (f-iter b c (+ c (* 2 b) (* 3 a)) (- n 1)))))

(define (f n)
  (f-iter 0 1 2 n))

(display (f 1))
(display "\n")
(display (f 2))
(display "\n")
(display (f 3))
(display "\n")
(display (f 4))
(display "\n")
(display (f 5))
(display "\n")
(display (f 6))
(display "\n")
