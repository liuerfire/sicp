(define (square n)
  (* n n))

(define (fast-expt b n)
  (expt-iter b n 1))

(define (expt-iter b n a)
  (cond ((= n 0) a)
        ((even? n) (expt-iter (square b) (/ n 2) a ))
        (else (expt-iter b (- n 1) (* b a)))))


(display (fast-expt 2 0))
(display "\n")
(display (fast-expt 2 1))
(display "\n")
(display (fast-expt 2 2))
(display "\n")
(display (fast-expt 2 3))
(display "\n")
(display (fast-expt 2 4))
(display "\n")
(display (fast-expt 2 5))
(display "\n")
(display (fast-expt 2 6))
(display "\n")
(display (fast-expt 2 7))
(display "\n")
(display (fast-expt 2 8))
(display "\n")
(display (fast-expt 2 9))
(display "\n")
(display (fast-expt 2 10))
(display "\n")
